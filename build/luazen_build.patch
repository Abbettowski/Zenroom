diff --git a/src/luazen.c b/src/luazen.c
index a8e6158..1dd8fa2 100644
--- a/src/luazen.c
+++ b/src/luazen.c
@@ -86,7 +86,7 @@ It includes the following algorithms
 
 extern int randombytes(unsigned char *x,unsigned long long xlen); 
 
-static int lz_randombytes(lua_State *L) {
+int lz_randombytes(lua_State *L) {
 	// Lua API:   randombytes(n)  returns a string with n random bytes 
 	// n must be 256 or less.
 	// randombytes return nil, error msg  if the RNG fails or if n > 256
@@ -112,7 +112,7 @@ static int lz_randombytes(lua_State *L) {
 //----------------------------------------------------------------------
 // NORX authenticated encryption
 
-static int lz_aead_encrypt(lua_State *L) {
+int lz_aead_encrypt(lua_State *L) {
 	// Lua API: encrypt(k, n, m [, ninc [, aad [, zad]]])  return c
 	//  k: key string (32 bytes)
 	//  n: nonce string (32 bytes)
@@ -155,7 +155,7 @@ static int lz_aead_encrypt(lua_State *L) {
 	return 1;
 } // lz_aead_encrypt()
 
-static int lz_aead_decrypt(lua_State *L) {
+int lz_aead_decrypt(lua_State *L) {
 	// Lua API: decrypt(k, n, c [, ninc [, aadln [, zadln]]]) 
 	//     return (m, aad, zad) | (nil, msg)
 	//  k: key string (32 bytes)
@@ -199,7 +199,7 @@ static int lz_aead_decrypt(lua_State *L) {
 //----------------------------------------------------------------------
 // curve25519 functions
 
-static int lz_x25519_keypair(lua_State *L) {
+int lz_x25519_keypair(lua_State *L) {
 	// generate and return a random key pair (publickey, secretkey)
 	// lua api: x25519_keypair()
 	// return (sk, pk)
@@ -213,7 +213,7 @@ static int lz_x25519_keypair(lua_State *L) {
 	return 2;
 }//lz_x25519_keypair()
 
-static int lz_x25519_public_key(lua_State *L) {
+int lz_x25519_public_key(lua_State *L) {
 	// return the public key associated to a secret key
 	// lua api:  x25519_public_key(sk) return pk
 	// sk: a secret key (can be any random value)
@@ -227,7 +227,7 @@ static int lz_x25519_public_key(lua_State *L) {
 	return 1;
 }//lz_x25519_public_key()
 
-static int lz_key_exchange(lua_State *L) {
+int lz_key_exchange(lua_State *L) {
 	// DH key exchange: compute a session key
 	// lua api:  lock_key(sk, pk) => k
 	// (!! reversed order compared to nacl box_beforenm() !!)
@@ -256,7 +256,7 @@ static int lz_key_exchange(lua_State *L) {
 //----------------------------------------------------------------------
 // blake2b hash functions
 
-static int lz_blake2b(lua_State *L) {
+int lz_blake2b(lua_State *L) {
 	// compute the hash of a string (convenience function)
 	// with default parameters (64-byte digest, no key)
 	// lua api:  blake2b(m) return digest
@@ -270,7 +270,7 @@ static int lz_blake2b(lua_State *L) {
     return 1;
 }// lz_blake2b
 
-static int lz_blake2b_init(lua_State *L) {
+int lz_blake2b_init(lua_State *L) {
 	// create and initialize a blake2b context
 	// lua api:  blake2b_init([digln [, key]]) return ctx
 	// digln: the optional length of the digest to be computed 
@@ -296,7 +296,7 @@ static int lz_blake2b_init(lua_State *L) {
     return 1;
 }// lz_blake2b_init
 
-static int lz_blake2b_update(lua_State *L) {
+int lz_blake2b_update(lua_State *L) {
 	// update the hash with a new text fragment
 	// lua api:  blake2b_update(ctx, t)
 	// ctx, a pointer to the blake2b context as a light userdata
@@ -312,7 +312,7 @@ static int lz_blake2b_update(lua_State *L) {
 }// lz_blake2b_update
 
 
-static int lz_blake2b_final(lua_State *L) {
+int lz_blake2b_final(lua_State *L) {
 	// return the final value of the hash (and free the context)
 	// lua api:  blake2b_final(ctx) return dig
 	// ctx, a pointer to the blake2b context as a light userdata
@@ -334,7 +334,7 @@ static int lz_blake2b_final(lua_State *L) {
 //----------------------------------------------------------------------
 // ed25519 signature functions
 
-static int lz_sign_keypair(lua_State *L) {
+int lz_sign_keypair(lua_State *L) {
 	// generates and return a pair of ed25519 signature keys 
 	// lua api: sign_keypair()  return (sk, pk)
 	unsigned char pk[32];
@@ -347,7 +347,7 @@ static int lz_sign_keypair(lua_State *L) {
 	return 2;
 }//lz_sign_keypair()
 
-static int lz_sign_public_key(lua_State *L) {
+int lz_sign_public_key(lua_State *L) {
 	// return the public key associated to an ed25519 secret key
 	// lua api:  sign_public_key(sk) return pk
 	// sk: a secret key (can be any random value)
@@ -361,7 +361,7 @@ static int lz_sign_public_key(lua_State *L) {
 	return 1;
 }//lz_sign_public_key()
 
-static int lz_sign(lua_State *L) {
+int lz_sign(lua_State *L) {
 	// sign a text with a secret key
 	// Lua API: sign(sk, pk, m) return sig
 	//  sk: key string (32 bytes)
@@ -380,7 +380,7 @@ static int lz_sign(lua_State *L) {
 	return 1;
 } // lz_sign()
 
-static int lz_check(lua_State *L) {
+int lz_check(lua_State *L) {
 	// check a text signature with a public key
 	// Lua API: check(sig, pk, m) return boolean
 	//  sig: signature string (64 bytes)
@@ -405,7 +405,7 @@ static int lz_check(lua_State *L) {
 //
 #ifndef NOARGON
 
-static int lz_argon2i(lua_State *L) {
+int lz_argon2i(lua_State *L) {
 	// Lua API: argon2i(pw, salt, nkb, niters) => k
 	// pw: the password string
 	// salt: some entropy as a string (typically 16 bytes)
@@ -437,21 +437,21 @@ static int lz_argon2i(lua_State *L) {
 
 // brieflz compression functions
 
-static uint32_t load32_le(const uint8_t s[4]) {
+uint32_t load32_le(const uint8_t s[4]) {
     return (uint32_t)s[0]
         | ((uint32_t)s[1] <<  8)
         | ((uint32_t)s[2] << 16)
         | ((uint32_t)s[3] << 24);
 }
 
-static void store32_le(uint8_t out[4], uint32_t in) {
+void store32_le(uint8_t out[4], uint32_t in) {
     out[0] =  in        & 0xff;
     out[1] = (in >>  8) & 0xff;
     out[2] = (in >> 16) & 0xff;
     out[3] = (in >> 24) & 0xff;
 }
 
-static int lz_blz(lua_State *L) {
+int lz_blz(lua_State *L) {
 	// Lua API:  blz(s) => c
 	// compress string s, return compressed string c
 	// or nil, error msg in case of error
@@ -470,7 +470,7 @@ static int lz_blz(lua_State *L) {
 	return 1;
 } //blz()
 
-static int lz_unblz(lua_State *L) {
+int lz_unblz(lua_State *L) {
 	// Lua API:  unblz(c) => s | nil, error msg
 	// decompress string c, return original string s
 	// or nil, error msg in case of decompression error
@@ -493,7 +493,7 @@ static int lz_unblz(lua_State *L) {
 
 // lzf compression functions
 
-static int lz_lzf(lua_State *L) {
+int lz_lzf(lua_State *L) {
     size_t sln, bufln; 
     unsigned int dstln;
     const char *s = luaL_checklstring (L, 1, &sln);
@@ -528,7 +528,7 @@ static int lz_lzf(lua_State *L) {
     return 1;    
 }
 
-static int lz_unlzf(lua_State *L) {
+int lz_unlzf(lua_State *L) {
     size_t sln, bufln; 
     unsigned int dstln;
     const char *s = luaL_checklstring (L, 1, &sln);
@@ -562,7 +562,7 @@ static int lz_unlzf(lua_State *L) {
 //-- output is same length as input
 //-- if key is shorter than input, it is repeated as much as necessary
 //
-static int lz_xor(lua_State *L) {
+int lz_xor(lua_State *L) {
     size_t sln, kln; 
     const char *s = luaL_checklstring (L, 1, &sln);
     const char *k = luaL_checklstring (L, 2, &kln);
@@ -586,7 +586,7 @@ static int lz_xor(lua_State *L) {
 //-- see http://en.wikipedia.org/wiki/RC4 for raw rc4 weaknesses
 //-- use rc4() instead for regular uses (a rc4-drop implementation)
 //
-static int lz_rc4raw(lua_State *L) {
+int lz_rc4raw(lua_State *L) {
 	size_t sln, kln; 
 	const char *src = luaL_checklstring (L, 1, &sln);
 	const char *key = luaL_checklstring (L, 2, &kln);
@@ -607,7 +607,7 @@ static int lz_rc4raw(lua_State *L) {
 //-- see http://www.users.zetnet.co.uk/hopwood/crypto/scan/cs.html#RC4-drop
 //-- encrypt and drop DROPLN bytes before starting to encrypt the plain text
 //
-static int lz_rc4(lua_State *L) {
+int lz_rc4(lua_State *L) {
     size_t sln, kln; 
     const char *src = luaL_checklstring (L, 1, &sln);
     const char *key = luaL_checklstring (L, 2, &kln);
@@ -633,7 +633,7 @@ static int lz_rc4(lua_State *L) {
 // md5
 // 
 
-static int lz_md5(lua_State *L) {
+int lz_md5(lua_State *L) {
     size_t sln; 
     const char *src = luaL_checklstring (L, 1, &sln);
     char digest[MD5_SIZE];
@@ -656,10 +656,10 @@ static int lz_md5(lua_State *L) {
 #define uint unsigned int
 #define B64LINELENGTH 72
 
-static const char code[]=
+const char code[]=
 "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
 
-static void b64encode(luaL_Buffer *b, uint c1, uint c2, uint c3, int n) {
+void b64encode(luaL_Buffer *b, uint c1, uint c2, uint c3, int n) {
 	unsigned long tuple=c3+256UL*(c2+256UL*c1);
 	int i;
 	char s[4];
@@ -671,7 +671,7 @@ static void b64encode(luaL_Buffer *b, uint c1, uint c2, uint c3, int n) {
 	luaL_addlstring(b,s,4);
 }
 
-static int lz_b64encode(lua_State *L) {
+int lz_b64encode(lua_State *L) {
 	// Lua:  
 	//   b64encode(str)  or  b64encode(str, linelen)
 	//     str is the tring to enccode
@@ -704,7 +704,7 @@ static int lz_b64encode(lua_State *L) {
 	return 1;
 }
 
-static void b64decode(luaL_Buffer *b, int c1, int c2, int c3, int c4, int n)
+void b64decode(luaL_Buffer *b, int c1, int c2, int c3, int c4, int n)
 {
 	unsigned long tuple=c4+64L*(c3+64L*(c2+64L*c1));
 	char s[3];
@@ -717,7 +717,7 @@ static void b64decode(luaL_Buffer *b, int c1, int c2, int c3, int c4, int n)
 	luaL_addlstring(b,s,n);
 }
 
-static int lz_b64decode(lua_State *L)		/** decode(s) */
+int lz_b64decode(lua_State *L)		/** decode(s) */
 {
 	size_t l;
 	const char *s=luaL_checklstring(L,1,&l);
@@ -761,7 +761,7 @@ static int lz_b64decode(lua_State *L)		/** decode(s) */
 // this encoding uses the same alphabet as bitcoin addresses:
 //   "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
 
-static int lz_b58encode(lua_State *L) {
+int lz_b58encode(lua_State *L) {
 	// lua api:  b58encode(str) => encoded | (nil, error msg)
 	// prereq:  #str <= 256  (defined as B58MAXLN)
 	size_t bln, eln;
@@ -782,7 +782,7 @@ static int lz_b58encode(lua_State *L) {
 }
 
 
-static int lz_b58decode(lua_State *L) {
+int lz_b58decode(lua_State *L) {
 	// lua api: b58decode(encstr) => str | (nil, error msg)
 	size_t bln, eln;
 	unsigned char buf[B58MAXENCLN]; 	// buffer to receive decoded string
@@ -811,7 +811,7 @@ static int lz_b58decode(lua_State *L) {
 //------------------------------------------------------------
 // lua library declaration
 //
-static const struct luaL_Reg lzlib[] = {
+const struct luaL_Reg lzlib[] = {
 	{"randombytes", lz_randombytes},
 	//
 	{"aead_encrypt", lz_aead_encrypt},
diff --git a/src/lzf_c.c b/src/lzf_c.c
index bc07084..fc4a6d1 100644
--- a/src/lzf_c.c
+++ b/src/lzf_c.c
@@ -120,7 +120,7 @@ lzf_compress (const void *const in_data, unsigned int in_len,
    * special workaround for it.
    */
 #if defined (WIN32) && defined (_M_X64)
-  unsigned _int64 off; /* workaround for missing POSIX compliance */
+  unsigned __int64 off; /* workaround for missing POSIX compliance */
 #else
   unsigned long off;
 #endif
diff --git a/src/randombytes.c b/src/randombytes.c
index 27b40f2..72b4810 100644
--- a/src/randombytes.c
+++ b/src/randombytes.c
@@ -1,83 +1,216 @@
+// The MIT License
+
+// Copyright (c) 2017 Daan Sprenkels <hello@dsprenkels.com>
+
+// Permission is hereby granted, free of charge, to any person obtaining a copy
+// of this software and associated documentation files (the "Software"), to deal
+// in the Software without restriction, including without limitation the rights
+// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+// copies of the Software, and to permit persons to whom the Software is
+// furnished to do so, subject to the following conditions:
+
+// The above copyright notice and this permission notice shall be included in
+// all copies or substantial portions of the Software.
+
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+// THE SOFTWARE.
+
+#include "randombytes.h"
+
+#if defined(_WIN32)
+/* Windows */
+# include <windows.h>
+# include <wincrypt.h> /* CryptAcquireContext, CryptGenRandom */
+#endif /* defined(_WIN32) */
+
+
+#if defined(__linux__)
+/* Linux */
+# define _GNU_SOURCE
+# include <assert.h>
+# include <errno.h>
+# include <fcntl.h>
+# include <linux/random.h>
+# include <poll.h>
+# include <stdint.h>
+# include <sys/ioctl.h>
+# include <sys/stat.h>
+# include <sys/syscall.h>
+# include <sys/types.h>
+# include <unistd.h>
+
+// We need SSIZE_MAX as the maximum read len from /dev/urandom
+# if !defined(SSIZE_MAX)
+#  define SSIZE_MAX (SIZE_MAX / 2 - 1)
+# endif /* defined(SSIZE_MAX) */
+
+#endif /* defined(__linux__) */
+
+
+#if defined(__unix__) || (defined(__APPLE__) && defined(__MACH__))
+/* Dragonfly, FreeBSD, NetBSD, OpenBSD (has arc4random) */
+# include <sys/param.h>
+# if defined(BSD)
+#  include <stdlib.h>
+# endif
+#endif
 
-// interface to the OS Random Number Generator  
 
-// the getrandom() detection code has been provided by Daurnimator 
-// (https://github.com/daurnimator)
+#if defined(_WIN32)
+static int randombytes_win32_randombytes(void* buf, const size_t n)
+{
+	HCRYPTPROV ctx;
+	BOOL tmp;
 
+	tmp = CryptAcquireContext(&ctx, NULL, NULL, PROV_RSA_FULL,
+	                          CRYPT_VERIFYCONTEXT);
+	if (tmp == FALSE) return -1;
 
-#ifdef _WIN32
+	tmp = CryptGenRandom(ctx, n, (BYTE*) buf);
+	if (tmp == FALSE) return -1;
 
-// ---------------------------------------------------------------------
-// randombytes()  for windows - Use the Windows RNG (CryptGenRandom)
-// tested with MinGW (2016-07-31)
+	tmp = CryptReleaseContext(ctx, 0);
+	if (tmp == FALSE) return -1;
 
-#include <stdlib.h>  /// for exit() 
+	return 0;
+}
+#endif /* defined(_WIN32) */
 
-#include <windows.h>
-#include <wincrypt.h> /* CryptAcquireContext, CryptGenRandom */
 
-int randombytes(unsigned char *x,unsigned long long xlen)
+#if defined(__linux__) && defined(SYS_getrandom)
+static int randombytes_linux_randombytes_getrandom(void *buf, size_t n)
 {
+	/* I have thought about using a separate PRF, seeded by getrandom, but
+	 * it turns out that the performance of getrandom is good enough
+	 * (250 MB/s on my laptop).
+	 */
+	size_t offset = 0, chunk;
+	int ret;
+	while (n > 0) {
+		/* getrandom does not allow chunks larger than 33554431 */
+		chunk = n <= 33554431 ? n : 33554431;
+		do {
+			ret = syscall(SYS_getrandom, (char *)buf + offset, chunk, 0);
+		} while (ret == -1 && errno == EINTR);
+		if (ret < 0) return ret;
+		offset += ret;
+		n -= ret;
+	}
+	assert(n == 0);
+	return 0;
+}
+#endif /* defined(__linux__) && defined(SYS_getrandom) */
 
 
-  HCRYPTPROV p;
-  ULONG i;
-
-if (xlen > 4096) {
-		xlen = 4096; 
+#if defined(__linux__) && !defined(SYS_getrandom)
+static int randombytes_linux_get_entropy_avail(int fd)
+{
+	int ret;
+	ioctl(fd, RNDGETENTCNT, &ret);
+	return ret;
 }
-	
-  if (CryptAcquireContext(&p, NULL, NULL,
-      PROV_RSA_FULL, CRYPT_VERIFYCONTEXT) == FALSE) {
-		return(-1); 
-  }
-  if (CryptGenRandom(p, xlen, (BYTE *)x) == FALSE) {
-		return(-1); 
-  }
-  CryptReleaseContext(p, 0);
-  return 0;
-}	
-
-#else // unix
-// ---------------------------------------------------------------------
-// use getrandom() or /dev/urandom
-
-#include <sys/types.h>
-#include <sys/stat.h>
-#include <fcntl.h>
-#include <unistd.h>
-
-#if defined __GLIBC_PREREQ && !defined __UCLIBC__
-#define GLIBC_PREREQ(M, m) (__GLIBC_PREREQ(M, m))
-#else
-#define GLIBC_PREREQ(M, m) 0
-#endif
 
-#ifndef HAVE_GETRANDOM
-#define HAVE_GETRANDOM (GLIBC_PREREQ(2,25) && __linux__)
-#endif
-#if HAVE_GETRANDOM
-#include <sys/random.h>
-#endif
 
-int randombytes(unsigned char *x, unsigned long long xlen) {
-	int fd, i;
-	size_t count = (size_t) xlen;
+static int randombytes_linux_wait_for_entropy(int device)
+{
+	/* We will block on /dev/random, because any increase in the OS' entropy
+	 * level will unblock the request. I use poll here (as does libsodium),
+	 * because we don't *actually* want to read from the device. */
+	const int bits = 128;
+	struct pollfd pfd;
+	int fd, retcode; /* Used as file descriptor *and* poll() return code */
+
+	/* If the device has enough entropy already, we will want to return early */
+	if (randombytes_linux_get_entropy_avail(device) >= bits) {
+		return 0;
+	}
 
-#if HAVE_GETRANDOM
-	i = getrandom(x, count, 0);
-#else
-	fd = open("/dev/urandom",O_RDONLY);
-	if (fd == -1) { 
-		return -1; 
+	do {
+		fd = open("/dev/random", O_RDONLY);
+	} while (fd == -1 && errno == EINTR); /* EAGAIN will not occur */
+	if (fd == -1) {
+		/* Unrecoverable IO error */
+		return -1;
 	}
-	i = read(fd, x, count);
-	close(fd);
-#endif
-	if ((i < 0) || (i < count)) { 
-		return -1; 
+
+	pfd.fd = fd;
+	pfd.events = POLLIN;
+	do {
+		retcode = poll(&pfd, 1, -1);
+	} while ((retcode == -1 && (errno == EINTR || errno == EAGAIN)) ||
+	         randombytes_linux_get_entropy_avail(device) < bits);
+	if (retcode != 1) {
+		do {
+			retcode = close(fd);
+		} while (retcode == -1 && errno == EINTR);
+		return -1;
+	}
+	retcode = close(fd);
+	return retcode;
+}
+
+
+static int randombytes_linux_randombytes_urandom(void *buf, size_t n)
+{
+	int fd;
+	size_t offset = 0, count;
+	ssize_t tmp;
+	do {
+		fd = open("/dev/urandom", O_RDONLY);
+	} while (fd == -1 && errno == EINTR);
+	if (randombytes_linux_wait_for_entropy(fd) == -1) return -1;
+
+	while (n > 0) {
+		count = n <= SSIZE_MAX ? n : SSIZE_MAX;
+		tmp = read(fd, (char *)buf + offset, count);
+		if (tmp == -1 && (errno == EAGAIN || errno == EINTR)) {
+			continue;
+		}
+		if (tmp == -1) return -1; /* Unrecoverable IO error */
+		offset += tmp;
+		n -= tmp;
 	}
+	assert(n == 0);
+	return 0;
+}
+#endif /* defined(__linux__) && !defined(SYS_getrandom) */
+
+
+#if defined(BSD)
+static int randombytes_bsd_randombytes(void *buf, size_t n)
+{
+	arc4random_buf(buf, n);
 	return 0;
 }
+#endif /* defined(BSD) */
 
+
+int randombytes(void *buf, size_t n)
+{
+#if defined(__linux__)
+# if defined(SYS_getrandom)
+#  pragma message("Using getrandom system call")
+	/* Use getrandom system call */
+	return randombytes_linux_randombytes_getrandom(buf, n);
+# else
+#  pragma message("Using /dev/urandom device")
+	/* When we have enough entropy, we can read from /dev/urandom */
+	return randombytes_linux_randombytes_urandom(buf, n);
+# endif
+#elif defined(BSD)
+# pragma message("Using arc4random system call")
+	/* Use arc4random system call */
+	return randombytes_bsd_randombytes(buf, n);
+#elif defined(_WIN32)
+# pragma message("Using Windows cryptographic API")
+	/* Use windows API */
+	return randombytes_win32_randombytes(buf, n);
+#else
+# error "randombytes(...) is not supported on this platform"
 #endif
+}
